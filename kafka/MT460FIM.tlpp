#Include "Protheus.ch"
#Include "RestFul.ch"

/*/{Protheus.doc} M460FIM
Ponto de Entrada executado após o faturamento da nota fiscal
Envia os dados da NF para o Apache Kafka via REST API
@type User Function
@author Fernando Vernier
@since 10/10/2025
@version 1.0

@see https://github.com/ftvernier/erp-solutions/tree/main/kafka
/*/
User Function M460FIM()
    Local aArea := GetArea()
    Local cNumNF := SF2->F2_DOC
    Local cSerie := SF2->F2_SERIE
    Local cCliente := SF2->F2_CLIENTE
    Local cLoja := SF2->F2_LOJA
    
    // Chama função para enviar ao Kafka
    U_SENDKAFKA(cNumNF, cSerie, cCliente, cLoja)
    
    RestArea(aArea)
Return

/*/{Protheus.doc} U_SENDKAFKA
Função que prepara e envia os dados da NF para o Kafka

@type User Function
@author Fernando Vernier
@since 10/10/2025

@param cNumNF, Character, Número da Nota Fiscal
@param cSerie, Character, Série da Nota Fiscal
@param cCliente, Character, Código do Cliente
@param cLoja, Character, Loja do Cliente

@return Logical, .T. se enviou com sucesso
/*/
User Function SENDKAFKA(cNumNF, cSerie, cCliente, cLoja)
    Local lRet := .T.
    Local oKafka := KafkaProducer():New()
    Local oNFData := JsonObject():New()
    Local oCabec := JsonObject():New()
    Local oMeta := JsonObject():New()
    Local aItens := {}
    Local oItem
    Local cJson := ""
    
    // Dados do Cabeçalho (SF2)
    oCabec['documento'] := AllTrim(SF2->F2_DOC)
    oCabec['serie'] := AllTrim(SF2->F2_SERIE)
    oCabec['cliente'] := AllTrim(SF2->F2_CLIENTE)
    oCabec['loja'] := AllTrim(SF2->F2_LOJA)
    oCabec['nomeCliente'] := AllTrim(Posicione("SA1", 1, xFilial("SA1") + cCliente + cLoja, "A1_NOME"))
    oCabec['emissao'] := DtoC(SF2->F2_EMISSAO)
    oCabec['valorTotal'] := SF2->F2_VALBRUT
    oCabec['chaveNFe'] := AllTrim(SF2->F2_CHVNFE)
    
    // Dados dos Itens (SD2)
    SD2->(DbSetOrder(3)) // D2_FILIAL+D2_DOC+D2_SERIE+D2_CLIENTE+D2_LOJA
    If SD2->(DbSeek(xFilial("SD2") + cNumNF + cSerie + cCliente + cLoja))
        While SD2->(!Eof()) .And. SD2->D2_DOC == cNumNF .And. SD2->D2_SERIE == cSerie
            
            oItem := JsonObject():New()
            oItem['item'] := AllTrim(SD2->D2_ITEM)
            oItem['produto'] := AllTrim(SD2->D2_COD)
            oItem['descricao'] := AllTrim(Posicione("SB1", 1, xFilial("SB1") + SD2->D2_COD, "B1_DESC"))
            oItem['quantidade'] := SD2->D2_QUANT
            oItem['valorUnitario'] := SD2->D2_PRCVEN
            oItem['valorTotal'] := SD2->D2_TOTAL
            oItem['tes'] := AllTrim(SD2->D2_TES)
            oItem['cf'] := AllTrim(SD2->D2_CF)
            
            aAdd(aItens, oItem)
            
            SD2->(DbSkip())
        EndDo
    EndIf
    
    // Adiciona metadados
    oMeta['empresa'] := cEmpAnt
    oMeta['filial'] := cFilAnt
    oMeta['dataHoraEnvio'] := FWTimeStamp(3) // ISO 8601
    oMeta['usuario'] := __cUserID
    
    // Monta estrutura final do JSON
    oNFData['topic'] := 'protheus-notas-fiscais'
    oNFData['key'] := AllTrim(cNumNF) + AllTrim(cSerie)
    oNFData['data'] := JsonObject():New()
    oNFData['data']['cabecalho'] := oCabec
    oNFData['data']['itens'] := aItens
    oNFData['data']['metadata'] := oMeta
    
    // Converte para string JSON
    cJson := oNFData:ToJson()
    
    // Envia para o Kafka
    lRet := oKafka:Send(cJson)
    
    If lRet
        ConOut("[KAFKA] Nota Fiscal " + cNumNF + "/" + cSerie + " enviada com sucesso!")
        // Opcional: Gravar log na tabela customizada
        U_LOGKAFKA(cNumNF, cSerie, "SUCCESS", "Enviado com sucesso")
    Else
        ConOut("[KAFKA] Erro ao enviar Nota Fiscal " + cNumNF + "/" + cSerie)
        U_LOGKAFKA(cNumNF, cSerie, "ERROR", oKafka:GetError())
    EndIf
    
Return lRet

/*/{Protheus.doc} KafkaProducer
Classe para encapsular a comunicação com Kafka via REST API

@type Class
@author Fernando Vernier
@since 10/10/2025
/*/
Class KafkaProducer
    Data cUrl
    Data cTopic
    Data cError
    Data nTimeOut
    
    Method New() Constructor
    Method Send(cJson)
    Method GetError()
EndClass

Method New() Class KafkaProducer
    ::cUrl := AllTrim(GetMV("MV_KAFKAURL",, "http://localhost:8082/topics/"))
    ::nTimeOut := GetMV("MV_KAFKATO",, 120)
    ::cError := ""
Return Self

Method Send(cJson) Class KafkaProducer
    Local lRet := .T.
    Local oRest := FWRest():New(::cUrl)
    Local cResponse := ""
    Local oResponse := JsonObject():New()
    Local aHeader := {}
    Local cParseError := ""
    
    // Configura headers necessários para Kafka REST Proxy
    aAdd(aHeader, "Content-Type: application/vnd.kafka.json.v2+json")
    aAdd(aHeader, "Accept: application/vnd.kafka.v2+json")
    
    // Configura o caminho (tópico)
    oRest:setPath("protheus-notas-fiscais")
    
    // Define o body do POST
    oRest:SetPostParams(cJson)
    
    // Envia POST
    If oRest:Post(aHeader)
        cResponse := oRest:GetResult()
        
        // Tenta fazer parse da resposta
        cParseError := oResponse:FromJson(cResponse)
        
        If Empty(cParseError)
            // Verifica se tem o campo offsets (sucesso)
            If oResponse:HasProperty('offsets') .And. ValType(oResponse['offsets']) == "A"
                If Len(oResponse['offsets']) > 0
                    ConOut("[KAFKA] Offset: " + cValToChar(oResponse['offsets'][1]['offset']))
                    lRet := .T.
                Else
                    ::cError := "Resposta sem offsets"
                    lRet := .F.
                EndIf
            Else
                ::cError := "Resposta inválida do Kafka - campo offsets não encontrado"
                lRet := .F.
            EndIf
        Else
            ::cError := "Erro ao fazer parse da resposta: " + cParseError
            lRet := .F.
        EndIf
    Else
        ::cError := "Erro HTTP: " + oRest:GetLastError()
        lRet := .F.
    EndIf
    
    // Libera o objeto
    FreeObj(oRest)
    
Return lRet

Method GetError() Class KafkaProducer
Return ::cError

/*/{Protheus.doc} U_LOGKAFKA
Função para registrar logs de integração (opcional)

@type User Function
@author Fernando Vernier
@since 10/10/2025
@param cNumNF, Character, Número da NF
@param cSerie, Character, Série
@param cStatus, Character, Status (SUCCESS/ERROR)
@param cMsg, Character, Mensagem
/*/
User Function LOGKAFKA(cNumNF, cSerie, cStatus, cMsg)
    Local cLog := "[LOG KAFKA] " + DtoC(Date()) + " " + Time() + " - "
    
    cLog += cNumNF + "/" + cSerie + " - " + cStatus + " - " + cMsg
    
    ConOut(cLog)
    
    // Aqui você pode implementar gravação em tabela customizada (ZZZ)
    // Exemplo:
    // RecLock("ZZZ", .T.)
    // ZZZ->ZZZ_FILIAL := xFilial("ZZZ")
    // ZZZ->ZZZ_DOC    := cNumNF
    // ZZZ->ZZZ_SERIE  := cSerie
    // ZZZ->ZZZ_STATUS := cStatus
    // ZZZ->ZZZ_MSG    := cMsg
    // ZZZ->ZZZ_DATA   := Date()
    // ZZZ->ZZZ_HORA   := Time()
    // MsUnlock()
    
Return
